INTRODUCTION.
The Holberton HBnB sums up the implementation of our four months of studies at the
Holberton School - the full-stack software engineering program. The goal of the project is to
deploy a replica of the Airbnb Website using our server. The final version of this project will
have:
> A command interpreter to manipulate data without a visual interface, like a shell( for
development and debugging a website (front-end) with static and dynamic functionalities.
> A comprehensive database to manage the back end functionalities
> An API that provides a communication interface between the front and back end of the
system.
HIGH-LEVEL ARCHITECTURE.
As you navigate this code base, it is great to note the following concepts, while completing
this project.
How to create a Python package
How to create a command interpreter in Python using the cmd module
What is Unit testing and how to implement it in a large project
How to serialize and de serialize a Class
How to write and read a J SON file
How to manage date time
What is an UUID
What is *args and how to use it
What is **kwargs and how to use it
How to handle named arguments in a function
BUSINESS LOGIC LAYER
Files and Directories
> Models directory will contain all classes used for the entire project.
> a class, called "model" in an OPP project is the presentation of an object/instance
> tests directory will contain all unit tests.
> console.py file is the entity point of our command interpreter.
> models/base_model.py file is the base class of all our models.
THIS WILL CONTAIN ELEMENTS:
> attributes: id, (created and updated)
>methods: Save() and to_json()
models/engine directory will contain all storage classes (using the same prototype). we will
have only one: file_storage.
API INTERACTION FLOW.
The Project Phase:
The first phase is to manipulate a powerful storage system to give an abstraction between
objects and how they are stored and persisted. To achieve this, We will:
1. Put in place a parent class(Base Mode) to take care of the initialization, serialization and
the deserialization of our future instances.
2. Create a simoke flow od serialization/deserialization: Instance <-> Dictionary <-> JSON
string <-> file
3. create all classes used for AirBnb ()User, state , city, Place ..) that inherit from BaseMode1.
4. create the first abstracted storage engine of the project: file Storage.
5. create a data model
6. Manage (create, update, destroy, etc) objects via a console/command interpreter, store and
persit object to the files (JSON files).
7.
Description of the command interpreter
Commands Description
quit Quits the console
Ctrl+D Quits the console
help or help <command> Displays all commands or Displays instructions
for a specific command
create <class> Creates an object of type , saves it to a JSON
file, and prints the objects ID
show <class> <ID> Shows string representation of an object
destroy <class> <ID> Deletes an objects
all or all <class>
Prints all string representations of all objects or
Prints all string representations of all objects of a
specific class
update <class> <id> <attribute name>
"<attribute value>"
Updates an object with a certain attribute (new or
existing)
<class>.all() Same as all <class>
<class>.count() Retrieves the number of objects of a certain class
<class>.show(<ID>) Same as show <class> <ID>
Commands Description
<class>.destroy(<ID>) Same as destroy <class> <ID>
<class>.update(<ID>), <attribute name>,
<attribute value>
Same as update <class> <ID> <attribute name>
<attribute value>
<class>.update(<ID>, <dictionary
representation>)
Updates an objects based on a dictionary
representation of attribute names and values